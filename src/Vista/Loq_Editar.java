package Vista;

import Modelo.GenerarCodigo;
import Modelo.conectar;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import static javax.swing.UIManager.getInt;
import javax.swing.table.DefaultTableModel;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;
import Modelo.Numero;
import java.awt.event.ActionEvent;
import java.awt.event.ItemEvent;
import javax.swing.JComboBox;
import javax.swing.JLabel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author ESTACION 4
 */
public class Loq_Editar extends javax.swing.JFrame {
    // static Connection cc= null;

    ResultSet result;
    int id = 0;
    static int idMuestra;
    String Nombreanalisis = "";
    String NombreMeto = "";
    static int pp;
    static String nombrelaboratorio;
    static int idlaboratorio =0;
    static int nsota;
    

    /**
     * Creates new form LoqNuevo
     */
    DefaultComboBoxModel modeloCombo;

    public Loq_Editar() throws SQLException {
        //   cargarcodigo();

        //     txt_registro.setText(); 
        modeloCombo = new DefaultComboBoxModel(new String[]{});
        initComponents();
        llenarClientes();
        llenarSeccion();
        AutoCompleteDecorator.decorate(cmbCliente);
        AutoCompleteDecorator.decorate(cmbAnalisis);
        AutoCompleteDecorator.decorate(cmbMatriz);
        txtSota.setEnabled(false);
        cmbAnalisis.setEnabled(false);
        cmbMetodologia.setEnabled(false);
        btnAgregarAnalisis.setEnabled(false);
        Tabla_analisis.setEnabled(false);
        obtenerDatos();
        generarNumeroRegistro();
      

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        cmbCliente = new javax.swing.JComboBox<>();
        txtCampana = new javax.swing.JTextField();
        cmbLaboratorioEjec = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtSota = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        cmbSecciones = new javax.swing.JComboBox<>();
        fechaIngreso = new com.toedter.calendar.JDateChooser();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtInformeLOQ = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        fechaEstimada = new com.toedter.calendar.JDateChooser();
        jLabel9 = new javax.swing.JLabel();
        cmbMatriz = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        fechaMuestreo = new com.toedter.calendar.JDateChooser();
        jLabel11 = new javax.swing.JLabel();
        cmbMetodologia = new javax.swing.JComboBox<>();
        txtIdentificacion = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        txtObservaciones = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        cmbDivision = new javax.swing.JComboBox<>();
        btnGuardar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Tabla_analisis = new javax.swing.JTable();
        btnAgregarAnalisis = new javax.swing.JButton();
        cmbAnalisis = new javax.swing.JComboBox<>();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel19 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        lb_registro = new javax.swing.JLabel();
        jSeparator4 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setPreferredSize(new java.awt.Dimension(1130, 530));

        cmbCliente.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione..." }));
        cmbCliente.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbClienteItemStateChanged(evt);
            }
        });

        cmbLaboratorioEjec.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione...", "LOQ", "Kummerlin", "Aqualaq", "CESMEC", "EULA", "ALS", "SGS", "Ecogestion", "LRR", "", "ANAM", "Algoritmos", "Biotecmar" }));
        cmbLaboratorioEjec.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbLaboratorioEjecItemStateChanged(evt);
            }
        });
        cmbLaboratorioEjec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbLaboratorioEjecActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel1.setText("Cliente");

        jLabel2.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel2.setText("Campaña");

        jLabel3.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel3.setText("Lab. Ejecutante");

        jLabel4.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel4.setText("N° SOTA");

        cmbSecciones.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione..." }));
        cmbSecciones.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbSeccionesItemStateChanged(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel5.setText("Sección");

        jLabel6.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel6.setText("Fecha Ingreso");

        jLabel7.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel7.setText("N° Informe LOQ");

        jLabel8.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel8.setText("Fecha Entrega Estimada");

        jLabel9.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel9.setText("Matriz");

        cmbMatriz.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione..." }));
        cmbMatriz.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbMatrizItemStateChanged(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel10.setText("Fecha Muestreo");

        jLabel11.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel11.setText("Identificación");

        cmbMetodologia.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione..." }));

        jLabel12.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel12.setText("Metodología");

        jLabel13.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel13.setText("Observaciones Generales");

        jLabel15.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel15.setText("División");

        cmbDivision.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione..." }));

        btnGuardar.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        btnGuardar.setText("GUARDAR");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        Tabla_analisis.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(Tabla_analisis);

        btnAgregarAnalisis.setText("Añadir");
        btnAgregarAnalisis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarAnalisisActionPerformed(evt);
            }
        });

        cmbAnalisis.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione..." }));
        cmbAnalisis.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbAnalisisItemStateChanged(evt);
            }
        });
        cmbAnalisis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbAnalisisActionPerformed(evt);
            }
        });

        jLabel16.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel16.setText("Analisis");

        jLabel17.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel17.setText("N° Registro");

        jLabel18.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel18.setText("Información General");

        jLabel19.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel19.setText("Información Muestra");

        lb_registro.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(lb_registro, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                    .addComponent(jSeparator3)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(btnGuardar))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel9)
                                        .addGap(18, 18, 18)
                                        .addComponent(cmbMatriz, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel11)
                                        .addGap(18, 18, 18)
                                        .addComponent(txtIdentificacion, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(26, 26, 26)
                                        .addComponent(jLabel10)
                                        .addGap(18, 18, 18)
                                        .addComponent(fechaMuestreo, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addComponent(jLabel19)
                                            .addGap(18, 18, 18)
                                            .addComponent(jSeparator2))
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addComponent(jLabel18)
                                            .addGap(18, 18, 18)
                                            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 930, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(cmbCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel15)
                                .addGap(18, 18, 18)
                                .addComponent(cmbDivision, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(txtCampana, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel7)
                                .addGap(18, 18, 18)
                                .addComponent(txtInformeLOQ, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(176, 176, 176)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel16)
                                        .addGap(18, 18, 18)
                                        .addComponent(cmbAnalisis, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(26, 26, 26)
                                        .addComponent(jLabel12)
                                        .addGap(18, 18, 18)
                                        .addComponent(cmbMetodologia, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(btnAgregarAnalisis))
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 636, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addContainerGap(53, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 1063, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(18, 18, 18)
                                .addComponent(cmbSecciones, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel13)
                                .addGap(18, 18, 18)
                                .addComponent(txtObservaciones, javax.swing.GroupLayout.PREFERRED_SIZE, 496, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(cmbLaboratorioEjec, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(76, 76, 76)
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addComponent(txtSota, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel6)
                                .addGap(18, 18, 18)
                                .addComponent(fechaIngreso, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel8)
                                .addGap(18, 18, 18)
                                .addComponent(fechaEstimada, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(35, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel17, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lb_registro, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15)
                    .addComponent(cmbDivision, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCampana, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel7)
                    .addComponent(txtInformeLOQ, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(fechaEstimada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmbLaboratorioEjec, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(txtSota, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)))
                    .addComponent(fechaIngreso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel9)
                        .addComponent(cmbMatriz, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel11)
                        .addComponent(txtIdentificacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel10))
                    .addComponent(fechaMuestreo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmbSecciones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)
                            .addComponent(jLabel13)
                            .addComponent(txtObservaciones, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel16)
                            .addComponent(cmbAnalisis, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12)
                            .addComponent(cmbMetodologia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnAgregarAnalisis))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(btnGuardar)))
                .addGap(16, 16, 16))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 1136, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 566, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmbClienteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbClienteItemStateChanged
        if (cmbCliente.getSelectedIndex() > -1) {
            cmbDivision.removeAllItems();
            cargarDivisiones();
        }
    }//GEN-LAST:event_cmbClienteItemStateChanged

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        if (txtSota != null) {
            conectar cc = new conectar();
            Connection cn = cc.conexion();

            String ins = "INSERT INTO muestras (fk_idcliente, campaña, laboratorioejecutante, nsota, secciones, fechaingresolaboratorio, ninformeloq, fechaentregaestimada, matriz, "
                    + "fechamuestreo, identificacion, observaciones, nregistro) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?)";

            try {
                PreparedStatement pst = cn.prepareStatement(ins);
                FilaDiv();
                pst.setInt(1, pp);
                pst.setString(2, txtCampana.getText());
                pst.setString(3, (String) cmbLaboratorioEjec.getSelectedItem());
                pst.setString(4, txtSota.getText());
                //  pst.setInt(4, Integer.parseInt(txtSota.getText()));
                pst.setString(5, (String) cmbSecciones.getSelectedItem());
                pst.setDate(6, new java.sql.Date(fechaIngreso.getDate().getTime()));
                pst.setString(7, txtInformeLOQ.getText());
                pst.setDate(8, new java.sql.Date(fechaEstimada.getDate().getTime()));
                pst.setString(9, (String) cmbMatriz.getSelectedItem());
                pst.setDate(10, new java.sql.Date(fechaMuestreo.getDate().getTime()));
                pst.setString(11, txtIdentificacion.getText());
         //       pst.setString(12, (String) cmbMetodologia.getSelectedItem());
                pst.setString(12, txtObservaciones.getText());
                pst.setString(13, lb_registro.getText());

                int n = pst.executeUpdate();
                pst.close();

                if (n > 0) {

                    JOptionPane.showMessageDialog(this, "Se guardaron los datos");
                    cmbSecciones.setEnabled(true);
                    cmbAnalisis.setEnabled(true);
                    cmbMetodologia.setEnabled(true);
                    btnAgregarAnalisis.setEnabled(true);
                    Tabla_analisis.setEnabled(true);
                    
                    cmbCliente.setEnabled(false);
                    cmbDivision.setEnabled(false);
                    txtCampana.setEnabled(false);
                    txtInformeLOQ.setEnabled(false);
                    cmbLaboratorioEjec.setEnabled(false);
                    txtSota.setEnabled(false);
                    fechaIngreso.setEnabled(false);
                    fechaEstimada.setEnabled(false);
                    cmbMatriz.setEnabled(false);
                    fechaMuestreo.setEnabled(false);
                    txtIdentificacion.setEnabled(false);
                    txtObservaciones.setEnabled(false);
                    btnGuardar.setEnabled(false);
                    cmbSecciones.setEnabled(false);
                    
                    

                } else {
                    JOptionPane.showMessageDialog(this, "Error");
                }

            } catch (SQLException ex) {
                Logger.getLogger(Loq_Editar.class.getName()).log(Level.SEVERE, null, ex);

            }
        } else {
            conectar cc = new conectar();
            Connection cn = cc.conexion();

            String ins = "INSERT INTO muestras (fk_idcliente, campaña, laboratorioejecutante, secciones, fechaingresolaboratorio, ninformeloq, fechaentregaestimada, matriz, "
                    + "fechamuestreo, identificacion, observaciones, nregistro) VALUES(?,?,?,?,?,?,?,?,?,?,?,?)";

            try {
                PreparedStatement pst = cn.prepareStatement(ins);
                //     Statement.RETURN_GENERATED_KEYS;
                FilaDiv();
                pst.setInt(1, pp);
                pst.setString(2, txtCampana.getText());
                pst.setString(3, (String) cmbLaboratorioEjec.getSelectedItem());
                //     pst.setString(4, txtSota.getText());
                //  pst.setInt(4, Integer.parseInt(txtSota.getText()));
                pst.setString(4, (String) cmbSecciones.getSelectedItem());
                pst.setDate(5, new java.sql.Date(fechaIngreso.getDate().getTime()));
                pst.setString(6, txtInformeLOQ.getText());
                pst.setDate(7, new java.sql.Date(fechaEstimada.getDate().getTime()));
                pst.setString(8, (String) cmbMatriz.getSelectedItem());
                pst.setDate(9, new java.sql.Date(fechaMuestreo.getDate().getTime()));
                pst.setString(10, txtIdentificacion.getText());
       //         pst.setString(12, (String) cmbMetodologia.getSelectedItem());
                pst.setString(11, txtObservaciones.getText());
                pst.setString(12, lb_registro.getText());

                int n = pst.executeUpdate();
                pst.close();

                if (n > 0) {

                    JOptionPane.showMessageDialog(this, "Se guardaron los datos");
                //    cmbSecciones.setEnabled(true);
                    cmbAnalisis.setEnabled(true);
                    cmbMetodologia.setEnabled(true);
                    btnAgregarAnalisis.setEnabled(true);
                    Tabla_analisis.setEnabled(true);

                    
                    cmbCliente.setEnabled(false);
                    cmbDivision.setEnabled(false);
                    txtCampana.setEnabled(false);
                    txtInformeLOQ.setEnabled(false);
                    cmbLaboratorioEjec.setEnabled(false);
                    txtSota.setEnabled(false);
                    fechaIngreso.setEnabled(false);
                    fechaEstimada.setEnabled(false);
                    cmbMatriz.setEnabled(false);
                    fechaMuestreo.setEnabled(false);
                    txtIdentificacion.setEnabled(false);
                    txtObservaciones.setEnabled(false);
                    btnGuardar.setEnabled(false);
                    cmbSecciones.setEnabled(false);
                } else {
                    JOptionPane.showMessageDialog(this, "Error");
                }

            } catch (SQLException ex) {
                Logger.getLogger(Loq_Editar.class.getName()).log(Level.SEVERE, null, ex);

            }
        }


    }//GEN-LAST:event_btnGuardarActionPerformed

    private void cmbLaboratorioEjecActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbLaboratorioEjecActionPerformed
        //     int p = cmbLaboratorio.getSelectedIndex();
        if (cmbLaboratorioEjec.getSelectedIndex() > 1) {
            txtSota.setEnabled(true);
        } else {
            txtSota.setEnabled(false);
        }

    }//GEN-LAST:event_cmbLaboratorioEjecActionPerformed

    private void cmbSeccionesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbSeccionesItemStateChanged
        if (cmbSecciones.getSelectedIndex() > -1) {
            cmbAnalisis.removeAllItems();
            cargarAnalisis();
            
        }          // TODO add your handling code here:
    }//GEN-LAST:event_cmbSeccionesItemStateChanged

    private void cmbMatrizItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbMatrizItemStateChanged
        if (cmbMatriz.getSelectedIndex() > -1) {
            cmbSecciones.removeAllItems();
            cargarSeccion();
            
        }          // TODO add your handling code here:
    }//GEN-LAST:event_cmbMatrizItemStateChanged

    private void btnAgregarAnalisisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarAnalisisActionPerformed
        
        NombreMeto = (String) cmbMetodologia.getSelectedItem();
        try {
            insertaranalisis();
            llenarTabla();
        } catch (SQLException ex) {
            Logger.getLogger(Loq_Editar.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnAgregarAnalisisActionPerformed

    private void cmbAnalisisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbAnalisisActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbAnalisisActionPerformed

    private void cmbAnalisisItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbAnalisisItemStateChanged
        if (cmbAnalisis.getSelectedIndex() > -1) {
            cmbMetodologia.removeAllItems();
            cargarMetodologia();
        }
    }//GEN-LAST:event_cmbAnalisisItemStateChanged

    private void cmbLaboratorioEjecItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbLaboratorioEjecItemStateChanged
        if (cmbLaboratorioEjec.getSelectedIndex() > -1) {
            cmbMatriz.removeAllItems();
            llenarMatriz();
            try {
                llenarTabla();
            } catch (SQLException ex) {
                Logger.getLogger(Loq_Editar.class.getName()).log(Level.SEVERE, null, ex);
            }
        }else{
            try {
                llenarTabla();
            } catch (SQLException ex) {
                Logger.getLogger(Loq_Editar.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_cmbLaboratorioEjecItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Loq_Editar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Loq_Editar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Loq_Editar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Loq_Editar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Loq_Editar().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(Loq_Editar.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        });
    }

    private void llenarClientes() {
        String cmb = "SELECT DISTINCT nombrecliente FROM clientes";
        try {
            Statement st = cn.createStatement();
            ResultSet set = st.executeQuery(cmb);
            // Bucle while para la consulta
            while (set.next()) {
                // rellena el combobox a partir de la consulta
                cmbCliente.addItem(set.getString("nombrecliente"));
            } // cn.close();

        } catch (SQLException e) {
            System.err.println("error consulta");
        }
    }

    private void llenarLaboratorio() {
        String cmb = "SELECT DISTINCT laboratorio FROM ensayos";
        try {
            Statement st = cn.createStatement();
            ResultSet set = st.executeQuery(cmb);
            // Bucle while para la consulta
            while (set.next()) {
                // rellena el combobox a partir de la consulta
                cmbLaboratorioEjec.addItem(set.getString("laboratorio"));
            } // cn.close();

        } catch (SQLException e) {
            System.err.println("error consulta");
        }
    }

    private void llenarSeccion() {
        String cmb = "SELECT DISTINCT laboratorio FROM secciones WHERE idsecciones != 1";
        try {
            Statement st = cn.createStatement();
            ResultSet set = st.executeQuery(cmb);
            // Bucle while para la consulta
            while (set.next()) {
                // rellena el combobox a partir de la consulta
                cmbSecciones.addItem(set.getString("laboratorio"));
            } // cn.close();

        } catch (SQLException e) {
            System.err.println("error consulta");
        }

    }

    private void llenarMatriz() {
        String cmb = "SELECT DISTINCT matriz FROM ensayos";
        try {
            Statement st = cn.createStatement();
            ResultSet set = st.executeQuery(cmb);
            // Bucle while para la consulta
            while (set.next()) {
                // rellena el combobox a partir de la consulta
                cmbMatriz.addItem(set.getString("matriz"));
            } // cn.close();

        } catch (SQLException e) {
            System.err.println("error consulta");
        }

    }

    private void llenarAnalisis() {
        String cmb = "SELECT DISTINCT analisis FROM ensayos";
        try {
            Statement st = cn.createStatement();
            ResultSet set = st.executeQuery(cmb);
            // Bucle while para la consulta
            while (set.next()) {
                // rellena el combobox a partir de la consulta
                cmbAnalisis.addItem(set.getString("analisis"));
            } // cn.close();

        } catch (SQLException e) {
            System.err.println("error consulta");
        }
    }

    private void llenarMetodologia() {
        String cmb = "SELECT DISTINCT metodologias FROM ensayos";
        try {
            Statement st = cn.createStatement();
            ResultSet set = st.executeQuery(cmb);
            // Bucle while para la consulta
            while (set.next()) {
                // rellena el combobox a partir de la consulta
                cmbMetodologia.addItem(set.getString("metodologias"));
            } // cn.close();

        } catch (SQLException e) {
            System.err.println("error consulta");
        }

    }

    private void cargarDivisiones() {
        conectar cc = new conectar();
        Connection cn = cc.conexion();

        if (this.cmbCliente.getSelectedIndex() > 0) {

            String nombrecliente = (String) cmbCliente.getSelectedItem();
            System.out.println(nombrecliente);

            String query = "SELECT DISTINCT * FROM clientes WHERE nombrecliente LIKE'" + cmbCliente.getSelectedItem().toString() + "'";
            try {
                PreparedStatement pst = cn.prepareStatement(query);
                result = pst.executeQuery();
                while (result.next()) {
                    cmbDivision.addItem(result.getString("divisiones"));
                }
                cmbDivision.setEnabled(true);
                System.out.println(cmbDivision);
                cn.close();
            } catch (SQLException ex) {
                Logger.getLogger(Loq_Editar.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }

    private void cargarMatriz() throws SQLException {
        conectar cc = new conectar();
        Connection cn = cc.conexion();

        if (this.cmbLaboratorioEjec.getSelectedIndex() >= 0) {

            String nombresecciones = (String) cmbLaboratorioEjec.getSelectedItem();
            System.out.println(nombresecciones);

            String querys = "SELECT DISTINCT matriz FROM ensayos WHERE laboratorio LIKE'%" + cmbLaboratorioEjec.getSelectedItem().toString() + "%'";
            try {
                PreparedStatement pste = cn.prepareStatement(querys);
                ResultSet results = pste.executeQuery();
                while (results.next()) {
                    cmbMatriz.addItem(results.getString("matriz"));
                }
                //    cmbDivision.setEnabled(true);
                //    cn.close();
            } catch (SQLException ex) {
                Logger.getLogger(Loq_Editar.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                result.close();
                cn.close();
            }
        } else {
            System.out.println("No seleccionado");
        }
    }

    private void cargarAnalisis() {
        conectar cc = new conectar();
        Connection cn = cc.conexion();

        if (this.cmbSecciones.getSelectedIndex() >= 0) {

            String nombreanalisis = (String) cmbSecciones.getSelectedItem();
            System.out.println(nombreanalisis);
// metodologias LIKE'%" + cmbMetodologia.getSelectedItem().toString() + "%' AND 
            String querys = "SELECT DISTINCT analisis FROM ensayos  WHERE laboratorio LIKE'%" + cmbSecciones.getSelectedItem().toString() + "%' AND  matriz LIKE'%" + cmbMatriz.getSelectedItem().toString() + "%'" ;
            //             + "%' AND laboratorio LIKE '%"+cmbSecciones.getSelectedItem().toString()+"%'";
            try {
                PreparedStatement pste = cn.prepareStatement(querys);
                ResultSet results = pste.executeQuery();
                while (results.next()) {
                    cmbAnalisis.addItem(results.getString("analisis"));
                }
                //    cmbDivision.setEnabled(true);
                cn.close();
            } catch (SQLException ex) {
                Logger.getLogger(Loq_Editar.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            System.out.println("No seleccionado");
        }
    }

    private void cargarMetodologia() {
        conectar cc = new conectar();
        Connection cn = cc.conexion();

        if (this.cmbAnalisis.getSelectedIndex() >= 0) {

            String nombreanalisis = (String) cmbAnalisis.getSelectedItem();
            System.out.println(nombreanalisis);

            String querys = "SELECT DISTINCT metodologias FROM ensayos WHERE analisis LIKE'%" + cmbAnalisis.getSelectedItem().toString() + "%' AND matriz LIKE '%" + cmbMatriz.getSelectedItem().toString() + "%'";
            try {
                PreparedStatement pste = cn.prepareStatement(querys);
                ResultSet results = pste.executeQuery();
                while (results.next()) {
                    cmbMetodologia.addItem(results.getString("metodologias"));
                }
                //    cmbDivision.setEnabled(true);
                cn.close();
            } catch (SQLException ex) {
                Logger.getLogger(Loq_Editar.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            System.out.println("No seleccionado");
        }
    }

    private void cargarSeccion() {
        Connection cn = cc.conexion();
        if (this.cmbMatriz.getSelectedIndex() >= 0) {
            String nombreSeccion = (String) cmbMatriz.getSelectedItem();
//metodologias LIKE'%" + cmbMetodologia.getSelectedItem().toString() + "%' AND 
            String query = "SELECT DISTINCT laboratorio FROM ensayos WHERE matriz LIKE '%" + cmbMatriz.getSelectedItem().toString() + "%'";
            try {
                PreparedStatement pst = cn.prepareStatement(query);
                ResultSet result = pst.executeQuery();
                while (result.next()) {
                    cmbSecciones.addItem(result.getString("laboratorio"));
                }
                cn.close();
            } catch (Exception e) {
                Logger.getLogger(Loq_Editar.class.getName()).log(Level.SEVERE, null, e);
            }
        } else {
            System.out.println("SECCION No seleccionado");
        }
    }

    void llenarTabla() throws SQLException {

        DefaultTableModel modelo = new DefaultTableModel();
        String query = "SELECT * FROM analisis WHERE fk_idmuestras ='" + idMuestra + "'";
        PreparedStatement pst = cn.prepareStatement(query);
        result = pst.executeQuery();
        modelo.setColumnIdentifiers(new Object[]{"Analisis", "Metodologias"});
        try {
            while (result.next()) {

                modelo.addRow(new Object[]{result.getString("analisis"), result.getString("metodologias")});
            }
            Tabla_analisis.setModel(modelo);
        } catch (Exception e) {
            Logger.getLogger(Loq_Editar.class.getName()).log(Level.SEVERE, null, e);

        }
    }

    public void insertaranalisis() throws SQLException {
        Nombreanalisis = (String) cmbAnalisis.getSelectedItem();
        BuscarultimaMuestra();
        String add = "INSERT INTO analisis ( analisis, metodologias, fk_idmuestras) VALUES ('" + Nombreanalisis + "','" + NombreMeto + "','" + idMuestra + "')";
        try {
            PreparedStatement pst = cn.prepareStatement(add);
            int result = pst.executeUpdate(add);

            if (result > 0) {

                System.out.println("insertado");
                System.out.println(Nombreanalisis);
                System.out.println("+" + idlaboratorio);
                pst.close();
            } else {
                System.out.println(Nombreanalisis);
                System.out.println("+" + idlaboratorio);
            }
        } catch (SQLException ex) {
            Logger.getLogger(Loq_Editar.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void BuscarultimaMuestra() throws SQLException {
        String query = "select idMuestras from muestras order by idMuestras desc limit 1";

        PreparedStatement pst = cn.prepareStatement(query);
        result = pst.executeQuery();
        if (result.next()) {
            idMuestra = result.getInt("idMuestras");
            System.out.println(idMuestra);
        }
    }

    public void FilaDiv() throws SQLException {
        conectar cc = new conectar();
        //    String pp = labelprueba.getText();
        String sql = "SELECT idClientes FROM clientes WHERE nombrecliente LIKE '%" +cmbCliente.getSelectedItem().toString()+ "%' AND divisiones LIKE '%" +cmbDivision.getSelectedItem().toString()+ "%'";
        try {
            PreparedStatement pst = cn.prepareStatement(sql);
            ResultSet result = pst.executeQuery();
            while (result.next()) {
                pp = result.getInt("idClientes");

                //   labelprueba.setText(result.geti(pp));
                System.out.println(pp);
            }
            //cn.close();
        } catch (SQLException e) {
            Logger.getLogger(Loq_Editar.class.getName()).log(Level.SEVERE, null, e);
        }
    }

//GENERA NUMERO DE FACTURA DE COMPRA
    void generarNumeroRegistro() {
       
        String sql = "SELECT LAST_INSERT_ID(nregistro)+1 as nregistro FROM muestras ORDER BY nregistro DESC LIMIT 1";
        conectar cc = new conectar();
        //    Connection cn = (Connection) cc.conexion();
        try {
            java.sql.Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                //Aca le digo que muestre el valor en un JtextFiel

                lb_registro.setText(rs.getString("nregistro"));

            }

        } catch (SQLException e) {
            // NOTA: So hubo error muestra el error
            JOptionPane.showMessageDialog(null, e);
        }
    }

  void buscarIdMuestras(){
    
      conectar cc = new conectar();
Connection cn = cc.conexion();

      nombrelaboratorio = (String) cmbSecciones.getSelectedItem();
                    
     String cmb ="SELECT LAST_INSERT_ID (idMuestras)+1 AS idMuestras FROM `muestras` WHERE secciones LIKE '"+nombrelaboratorio+"' ORDER BY idMuestras DESC LIMIT 1";
               
      try {
          Statement st= cn.createStatement();
          ResultSet set = st.executeQuery(cmb);
            while(set.next()){
                idlaboratorio = set.getInt("idMuestras");
        System.out.println(idlaboratorio);
            }cn.close();
      } catch (Exception e) {
          System.out.println("SIN ID LABORATORIO"+idlaboratorio);
      }
  }
 
 void InsertT(){
      String add = "INSERT INTO analisis ( analisis, metodologias, fk_idmuestras) VALUES ('" + Nombreanalisis + "','" + NombreMeto + "','" + idlaboratorio + "')";
     String sql ="INSERT INTO analisis(analisis, metodologias,fk_idmuestras) VALUES (?,?,?)";
       try {
            PreparedStatement pst = cn.prepareStatement(sql);
                //     Statement.RETURN_GENERATED_KEYS;

                pst.setString(1, Nombreanalisis);
                pst.setString(2, NombreMeto);
                pst.setInt(3, idlaboratorio);
     } catch (Exception e) {
     }
    
 
     String sql1 ="";
 }

 
      public void obtenerDatos (){
    
     lb_registro.setText(Integer.toString((TableroMuestraLOQ_Recepcionista_Beta.nregistro)));
     lb_registro.repaint();
     fechaIngreso.setDate(TableroMuestraLOQ_Recepcionista_Beta.fechaingresolaboratorio);
     cmbLaboratorioEjec.getModel().setSelectedItem(String.valueOf(TableroMuestraLOQ_Recepcionista_Beta.laboratorioejecutante));
     txtSota.setText(Integer.toString(TableroMuestraLOQ_Recepcionista_Beta.nsota));
     cmbMatriz.getModel().setSelectedItem(String.valueOf(TableroMuestraLOQ_Recepcionista_Beta.matriz));

 //labelID.setText(Integer.toString(Lista.id_muestrasLoq));
     
 }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Tabla_analisis;
    private javax.swing.JButton btnAgregarAnalisis;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JComboBox<String> cmbAnalisis;
    private javax.swing.JComboBox<String> cmbCliente;
    private javax.swing.JComboBox<String> cmbDivision;
    private javax.swing.JComboBox<String> cmbLaboratorioEjec;
    private javax.swing.JComboBox<String> cmbMatriz;
    private javax.swing.JComboBox<String> cmbMetodologia;
    private javax.swing.JComboBox<String> cmbSecciones;
    private com.toedter.calendar.JDateChooser fechaEstimada;
    private com.toedter.calendar.JDateChooser fechaIngreso;
    private com.toedter.calendar.JDateChooser fechaMuestreo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JLabel lb_registro;
    private javax.swing.JTextField txtCampana;
    private javax.swing.JTextField txtIdentificacion;
    private javax.swing.JTextField txtInformeLOQ;
    private javax.swing.JTextField txtObservaciones;
    private javax.swing.JTextField txtSota;
    // End of variables declaration//GEN-END:variables
    conectar cc = new conectar();
    Connection cn = cc.conexion();

}
